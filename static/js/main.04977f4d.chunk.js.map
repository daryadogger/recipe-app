{"version":3,"sources":["report-web-vitals.js","const.js","functions/get-unique-id.js","add-recipe/add-recipe-modal-view.jsx","add-recipe/add-recipe-modal.jsx","edit-recipe/edit-recipe-modal-view.jsx","edit-recipe/edit-recipe-modal.jsx","accordion-item/accordion-item-view.jsx","accordion-item/accordion-item.jsx","functions/get-splited-string.js","app/app.jsx","hooks/use-local-storage.js","index.js","mocks/recipes.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RecipeLength","getUniqueId","localStorage","JSON","parse","getItem","Math","random","length","AddRecipeModalView","props","onFormSubmit","onShow","setIngredients","setName","setIsShowModal","newRecipe","isPostDisabled","Modal","show","onHide","Header","closeButton","Title","Body","Form","action","className","onSubmit","Group","controlId","Label","Control","type","required","onChange","defaultValue","name","placeholder","data-testid","ingredients","Button","variant","disabled","AddRecipeModal","setRecipes","recipes","useState","id","setNewRecipe","setIsPostDisabled","useEffect","evt","preventDefault","uniqueId","_recipes","slice","push","handleAddNewRecipe","target","value","EditRecipeModalView","setIsShowEditModal","handleFormSubmit","recipe","EditRecipeModal","editRecipe","setEditRecipe","recipeIndex","findIndex","splice","handleEditRecipe","AccordionItemView","onBtnEditClick","onBtnDeleteClick","isShowEditModal","Card","Accordion","Toggle","as","eventKey","Collapse","ListGroup","map","ingridient","Item","ButtonToolbar","size","onClick","AccordionItem","string","separator","split","handleBtnEditClick","useCallback","App","recipesMocks","isShowModal","key","initialValue","item","window","error","console","log","storedValue","setStoredValue","valueToStore","setItem","stringify","useLocalStorage","handleBtnAddRecipeClick","Container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04977f4d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const RecipeLength = {\r\n    MIN: 1,\r\n};","export const getUniqueId = () => {\r\n    const arr = (typeof localStorage[\"recipes\"] !== \"undefined\") ? JSON.parse(localStorage.getItem(\"recipes\")) : Math.random();\r\n    return arr.length;\r\n};","import React from 'react';\r\nimport {Button, Form, Modal} from \"react-bootstrap\";\r\n\r\nfunction AddRecipeModalView(props) {\r\n    const {onFormSubmit, onShow, setIngredients, setName, setIsShowModal, newRecipe, isPostDisabled} = props;\r\n\r\n    return(\r\n\r\n        <Modal show={onShow} onHide={() => {setIsShowModal(false)}}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>New Recipe</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <Form action=\"#\" className=\"add-review__form\" onSubmit={onFormSubmit}>\r\n                    <Form.Group controlId=\"recipeName\">\r\n                        <Form.Label>Recipe Name</Form.Label>\r\n                        <Form.Control type=\"text\" required onChange={setName} defaultValue={newRecipe.name} placeholder=\"Enter Name\" data-testid=\"name\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"recipeIngredients\">\r\n                        <Form.Label>Recipe Ingredients</Form.Label>\r\n                        <Form.Control type=\"text\" required onChange={setIngredients} defaultValue={newRecipe.ingredients} placeholder=\"Enter Ingredients(separate by commas)\" data-testid=\"ingredients\" />\r\n                    </Form.Group>\r\n                    <Button variant=\"success\" type=\"submit\" disabled={isPostDisabled}>Save Recipe</Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n    );\r\n};\r\n\r\nexport default AddRecipeModalView;","import React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport {RecipeLength} from '../const';\r\nimport {getUniqueId} from '../functions/get-unique-id';\r\nimport AddRecipeModalView from './add-recipe-modal-view';\r\n\r\nfunction AddRecipeModal(props) {\r\n    const {onShow, setIsShowModal, setRecipes, recipes} = props;\r\n\r\n    const [newRecipe, setNewRecipe] = useState({\r\n        id: getUniqueId(),\r\n        name: ``,\r\n        ingredients: ``\r\n    });\r\n    const [isPostDisabled, setIsPostDisabled] = useState(true);\r\n\r\n    const setName = (evt) => setNewRecipe({...newRecipe, name: evt.target.value});\r\n    const setIngredients = (evt) => setNewRecipe({...newRecipe, ingredients: evt.target.value});\r\n\r\n    useEffect(() => {\r\n        if (newRecipe.name.length > RecipeLength.MIN && newRecipe.ingredients.length > RecipeLength.MIN) {\r\n            setIsPostDisabled(false);\r\n        } else {\r\n            setIsPostDisabled(true);\r\n        }\r\n    }, [newRecipe]);\r\n\r\n    const handleAddNewRecipe = (newRecipe) => {\r\n        let _recipes = recipes.slice();\r\n\r\n        _recipes.push(newRecipe);\r\n        setRecipes(_recipes);\r\n\r\n        setNewRecipe({\r\n            id: getUniqueId(),\r\n            name: ``,\r\n            ingredients: ``\r\n        });\r\n    };\r\n\r\n    const handleFormSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        let uniqueId = getUniqueId();\r\n        \r\n        setNewRecipe({...newRecipe, id: uniqueId});\r\n        handleAddNewRecipe(newRecipe);\r\n        setIsShowModal(false);\r\n    };\r\n\r\n    return(\r\n        \r\n        <AddRecipeModalView onFormSubmit={handleFormSubmit} onShow={onShow} setName={setName} setIngredients={setIngredients} setIsPostDisabled={setIsPostDisabled}\r\n            setIsShowModal={setIsShowModal} newRecipe={newRecipe} isPostDisabled={isPostDisabled} />\r\n            \r\n    );\r\n};\r\n\r\nexport default AddRecipeModal;","import React from 'react';\r\nimport {Button, Form, Modal} from \"react-bootstrap\";\r\n\r\nfunction EditRecipeModalView(props) {\r\n    const {onShow, setIsShowEditModal, handleFormSubmit, recipe, setIngredients, setName, isPostDisabled} = props;\r\n\r\n    return(\r\n\r\n        <Modal show={onShow} onHide={() => {setIsShowEditModal(false)}}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Edit Recipe</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <Form action=\"#\" className=\"add-review__form\" onSubmit={handleFormSubmit}>\r\n                    <Form.Group controlId=\"recipeName\">\r\n                        <Form.Label>Recipe Name</Form.Label>\r\n                        <Form.Control type=\"text\" required onChange={setName} defaultValue={recipe.name} placeholder=\"Enter Name\" data-testid=\"name\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"recipeIngredients\">\r\n                        <Form.Label>Recipe Ingredients</Form.Label>\r\n                        <Form.Control type=\"text\" required onChange={setIngredients} defaultValue={recipe.ingredients} placeholder=\"Enter Ingredients(separate by commas)\" data-testid=\"ingredients\" />\r\n                    </Form.Group>\r\n                    <Button variant=\"success\" type=\"submit\" disabled={isPostDisabled}>Save Recipe</Button>\r\n                </Form>\r\n            </Modal.Body>\r\n        </Modal>\r\n        \r\n    );\r\n};\r\n\r\nexport default EditRecipeModalView;","import React from 'react';\r\nimport {useEffect, useState} from \"react\";\r\nimport {RecipeLength} from \"../const\";\r\nimport EditRecipeModalView from \"./edit-recipe-modal-view\";\r\n\r\nfunction EditRecipeModal(props) {\r\n    const {onShow, setIsShowEditModal, recipe, id, setRecipes, recipes} = props;\r\n\r\n    const [isPostDisabled, setIsPostDisabled] = useState(true);\r\n    const [editRecipe, setEditRecipe] = useState({\r\n        id: recipe.id,\r\n        name: recipe.name,\r\n        ingredients: recipe.ingredients\r\n    });\r\n    const setName = (evt) => setEditRecipe({...editRecipe, name: evt.target.value});\r\n    const setIngredients = (evt) => setEditRecipe({...editRecipe, ingredients: evt.target.value});\r\n\r\n    useEffect(() => {\r\n        if (editRecipe.name.length > RecipeLength.MIN && editRecipe.ingredients.length > RecipeLength.MIN) {\r\n            setIsPostDisabled(false);\r\n        } else {\r\n            setIsPostDisabled(true);\r\n        }\r\n    }, [editRecipe]);\r\n\r\n    const handleEditRecipe = (id, editRecipe) => {\r\n        let _recipes = recipes.slice();\r\n        let recipeIndex = _recipes.findIndex(recipe => recipe.id === id);\r\n\r\n        _recipes.splice(recipeIndex, 1, editRecipe);\r\n        setRecipes(_recipes);\r\n    };\r\n\r\n    const handleFormSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        \r\n        handleEditRecipe(id, editRecipe);\r\n        setIsShowEditModal(false);\r\n    };\r\n\r\n    return(\r\n\r\n        <EditRecipeModalView recipe={recipe} onShow={onShow} setIsShowEditModal={setIsShowEditModal} handleFormSubmit={handleFormSubmit} setName={setName}\r\n            setIngredients={setIngredients} isPostDisabled={isPostDisabled} />\r\n        \r\n    );\r\n};\r\n\r\nexport default EditRecipeModal;","import React from 'react';\r\nimport {Accordion, Button, ButtonToolbar, Card, ListGroup} from \"react-bootstrap\";\r\nimport EditRecipeModal from \"../edit-recipe/edit-recipe-modal\";\r\n\r\nfunction AccordionItemView(props) {\r\n    const {recipe, ingredients, onBtnEditClick, onBtnDeleteClick, setRecipes, id, isShowEditModal, setIsShowEditModal, recipes} = props;\r\n\r\n    return(\r\n\r\n        <Card>\r\n\r\n        <Accordion.Toggle as={Card.Header} eventKey={recipe.id + 1} className=\"d-flex justify-content-between\">\r\n            <p className=\"mb-0\">{recipe.name}</p>\r\n        </Accordion.Toggle>\r\n\r\n        <Accordion.Collapse eventKey={recipe.id + 1}>\r\n            <div className=\"p-3\">\r\n\r\n            <ListGroup className=\"mb-3\">\r\n                {ingredients.map((ingridient) => <ListGroup.Item key={`ingridient-${ingridient}`} >{ingridient}</ListGroup.Item>)}\r\n            </ListGroup>\r\n\r\n            <ButtonToolbar>\r\n                <Button className=\"mr-2\" variant=\"outline-secondary\" size=\"sm\" onClick={onBtnEditClick}>Edit</Button>\r\n                <Button variant=\"outline-danger\" size=\"sm\" onClick={() => {onBtnDeleteClick(id)}}>Delete</Button>\r\n            </ButtonToolbar>\r\n\r\n            <EditRecipeModal onShow={isShowEditModal} setIsShowEditModal={setIsShowEditModal} recipe={recipe} recipes={recipes} setRecipes={setRecipes} id={id} />\r\n            </div>\r\n        </Accordion.Collapse>\r\n        \r\n        </Card>\r\n\r\n    );\r\n};\r\n\r\nexport default AccordionItemView;","import React, {useCallback} from 'react';\r\nimport {useState} from \"react\";\r\nimport {getSplitedString} from \"../functions/get-splited-string\";\r\nimport AccordionItemView from \"./accordion-item-view\";\r\n\r\nfunction AccordionItem(props) {\r\n    const {recipe, setRecipes, id, recipes} = props;\r\n    \r\n    const ingredients = getSplitedString(recipe.ingredients, `,`);\r\n\r\n    const [isShowEditModal, setIsShowEditModal] = useState(false);\r\n\r\n    const handleBtnEditClick = useCallback(() => {\r\n        setIsShowEditModal(!isShowEditModal);\r\n    }, [isShowEditModal]);\r\n\r\n    const handleBtnDeleteClick = (id) => {\r\n        let _recipes = recipes.slice();\r\n        let recipeIndex = _recipes.findIndex(recipe => recipe.id === id);\r\n        \r\n        _recipes.splice(recipeIndex, 1);\r\n        setRecipes(_recipes);\r\n    };\r\n\r\n    return(\r\n\r\n        <AccordionItemView id={id} ingredients={ingredients} recipe={recipe} onBtnEditClick={handleBtnEditClick} onBtnDeleteClick={handleBtnDeleteClick}\r\n        setRecipes={setRecipes} isShowEditModal={isShowEditModal} setIsShowEditModal={setIsShowEditModal} recipes={recipes} />\r\n\r\n    );\r\n};\r\n\r\nexport default AccordionItem;","export const getSplitedString = (string, separator) => {\r\n    return string.split(separator);\r\n};","import React, {useCallback} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport AddRecipeModal from '../add-recipe/add-recipe-modal';\r\nimport './app.css';\r\nimport {useState} from \"react\";\r\nimport {Accordion, Button, Container} from \"react-bootstrap\";\r\nimport AccordionItem from \"../accordion-item/accordion-item\";\r\nimport {useLocalStorage} from '../hooks/use-local-storage';\r\n\r\nfunction App(props) {\r\n    const {recipesMocks} = props;\r\n    \r\n    const [isShowModal, setIsShowModal] = useState(false);\r\n    const [recipes, setRecipes] = useLocalStorage(\"recipes\", recipesMocks);\r\n\r\n    const handleBtnAddRecipeClick = useCallback(() => {\r\n        setIsShowModal(!isShowModal);\r\n    }, [isShowModal]);\r\n\r\n    return (\r\n\r\n        <Container className=\"pt-5\">\r\n            <h1 className=\"mb-5 text-center\">It's a recipes app! You're welcome!</h1>\r\n\r\n            <Accordion className=\"mb-4\">\r\n\r\n                {recipes.map((recipe) => <AccordionItem recipe={recipe} id={recipe.id} key={`recipe-${recipe.id}`} recipes={recipes} setRecipes={setRecipes} />)}\r\n\r\n            </Accordion>\r\n\r\n            <Button variant=\"info\" size=\"lg\" onClick={handleBtnAddRecipeClick}>Add recipe</Button>\r\n            <AddRecipeModal onShow={isShowModal} setIsShowModal={setIsShowModal} setRecipes={setRecipes} recipes={recipes} />\r\n\r\n        </Container>\r\n\r\n    );\r\n}\r\n\r\nexport default App;","import {useState} from \"react\";\r\n\r\nexport function useLocalStorage(key, initialValue) {\r\n    // State to store our value\r\n    // Pass initial state function to useState so logic is only executed once\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n        try {\r\n        // Get from local storage by key\r\n        const item = window.localStorage.getItem(key);\r\n        // Parse stored json or if none return initialValue\r\n        return item ? JSON.parse(item) : initialValue;\r\n        } catch (error) {\r\n        // If error also return initialValue\r\n        console.log(error);\r\n        return initialValue;\r\n        }\r\n    });\r\n    // Return a wrapped version of useState's setter function that ...\r\n    // ... persists the new value to localStorage.\r\n    const setValue = (value) => {\r\n        try {\r\n        // Allow value to be a function so we have same API as useState\r\n        const valueToStore =\r\n            value instanceof Function ? value(storedValue) : value;\r\n        // Save state\r\n        setStoredValue(valueToStore);\r\n        // Save to local storage\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n        } catch (error) {\r\n        // A more advanced implementation would handle the error case\r\n        console.log(error);\r\n        }\r\n    };\r\n    return [storedValue, setValue];\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './report-web-vitals';\r\nimport {recipes} from './mocks/recipes';\r\nimport App from './app/app.jsx';\r\n\r\nReactDOM.render(\r\n  <App recipesMocks={recipes} />,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n","export const recipes = [\r\n  {\r\n    id: 0,\r\n    name: `Beef & Broccoli`,\r\n    ingredients: `Beef, Broccoli, Cream, Salt, Paper`\r\n  },\r\n  {\r\n    id: 1,\r\n    name: `Banana milkshake`,\r\n    ingredients: `Bananas, Milk, Ice cream`\r\n  },\r\n  {\r\n    id: 2,\r\n    name: `Pizza`,\r\n    ingredients: `Dough, Fresh basil leaves, Pinch red pepper flakes, Mozzarella`\r\n  },\r\n];"],"sourceRoot":""}